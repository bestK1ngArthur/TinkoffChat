//
//  ViewController.swift
//  Tinkoff Chat
//
//  Created by Artem Belkov on 20/09/2017.
//  Copyright ¬© 2017 Artem Belkov. All rights reserved.
//

import UIKit

class ProfileViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate {

    private enum State {
        case show
        case edit
    }
    
    @IBOutlet weak var userPhotoView: UIImageView!
    @IBOutlet weak var cameraView: UIView!
    
    // Show state
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var descriptionLabel: UILabel!
    @IBOutlet weak var editButton: UIButton!
    
    // Edit state
    @IBOutlet weak var titleField: UITextField!
    @IBOutlet weak var descriptionField: UITextField!
    @IBOutlet weak var gcdButton: UIButton!
    @IBOutlet weak var operationButton: UIButton!
    
    private var imagePicker = UIImagePickerController()

    private var state: State = .show {
        didSet {
            self.updateState()
        }
    }
    private var user: User = User(name: "–ê—Ä—Ç—ë–º –ë–µ–ª–∫–æ–≤", description: "–õ—é–±–ª—é iOS üòç", imageName: "test")
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        // print(editButton.frame)
        // fatal error: unexpectedly found nil while unwrapping an Optional value.
        // –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–±—ä–µ–∫—Ç –∫–Ω–æ–ø–∫–∏ –µ—â—ë –Ω–æ —Å–æ–∑–¥–∞–Ω.
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        state = .show
        
        titleLabel.text = user.name
        descriptionLabel.text = user.description
        
        print(editButton.frame)
        logMethod()
        
        // Load user
        GCDDataManager.shared.loadUser(success: { (user) in
            
            if let user = user {
                self.user = user
            }
            
            self.titleLabel.text = self.user.name
            self.descriptionLabel.text = self.user.description
            
        }) { (error) in
            // Error of loading user
        }
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        print(editButton.frame)
        // –ë–∞–¥—É–º—Å, —Ñ—Ä–µ–π–º—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ. –ï—Å—Ç—å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ, —á—Ç–æ –≤—Å—è —Å—É—Ç—å —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ —Ç–æ–º, —á—Ç–æ–±—ã —Å—Ä–∞–≤–Ω–∏—Ç—å —Ñ—Ä–µ–π–º—ã –¥–æ –∏ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ layoutSubvies(). –û–¥–Ω–∞–∫–æ, –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ viewWillAppear(). –¢–∞–∫ —á—Ç–æ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ viewDidAppear()
        logMethod()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        prepareUI()
        
        print(editButton.frame)
        // –í–æ—Ç, —Ñ—Ä–µ–π–º—ã —É–∂–µ —Ä–∞–∑–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ layoutSubvies() –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–¥–æ–≥–Ω–∞–ª—Å—è –ø–æ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞.
        logMethod()
    }
    
    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()
        logMethod()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        logMethod()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        logMethod()
    }

    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        logMethod()
    }
    
    func prepareUI() {
        
        // Prepare user photo view
        userPhotoView.layer.cornerRadius = cameraView.frame.height / 2
        
        // Prepare camera view
        cameraView.layer.cornerRadius = cameraView.frame.height / 2
        let tap = UITapGestureRecognizer(target: self, action: #selector(changePhotoAction))
        cameraView.addGestureRecognizer(tap)
        
        // Prepare buttons
        editButton.layer.borderColor = UIColor.black.cgColor
        editButton.layer.borderWidth = 2
        editButton.layer.cornerRadius = 12
        gcdButton.layer.borderColor = UIColor.black.cgColor
        gcdButton.layer.borderWidth = 2
        gcdButton.layer.cornerRadius = 12
        operationButton.layer.borderColor = UIColor.black.cgColor
        operationButton.layer.borderWidth = 2
        operationButton.layer.cornerRadius = 12
    }
    
    func updateState() {
        switch state {
        case .show:
            
            // Set fields
            titleLabel.isHidden = false
            descriptionLabel.isHidden = false
            titleField.isHidden = true
            descriptionField.isHidden = true
            
            // Set imageView
            cameraView.isHidden = true
            
            // Set buttons
            editButton.isHidden = false
            gcdButton.isHidden = true
            operationButton.isHidden = true

            // Update labels
            titleLabel.text = user.name
            descriptionLabel.text = user.description
            
        case .edit:
            
            // Set fields
            titleLabel.isHidden = true
            descriptionLabel.isHidden = true
            titleField.isHidden = false
            descriptionField.isHidden = false
            
            // Set imageView
            cameraView.isHidden = false
            
            // Set buttons
            editButton.isHidden = true
            gcdButton.isHidden = false
            operationButton.isHidden = false

            // Update fields
            titleField.text = user.name
            descriptionField.text = user.description
        }
    }
    
    // MARK: Actions
    
    @IBAction func closeAction(_ sender: Any) {
        
        switch state {
        case .show:
            self.dismiss(animated: true, completion: nil)
        case .edit:
            self.state = .show
        }
    }
    
    @objc func changePhotoAction() {
        
        let alert = UIAlertController(title: "–í—ã–±–µ—Ä–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", message: nil, preferredStyle: UIAlertControllerStyle.actionSheet)
        let cameraAction = UIAlertAction(title: "–ö–∞–º–µ—Ä–∞", style: UIAlertActionStyle.default) { action in
            self.openCamera()
        }
        let gallaryAction = UIAlertAction(title: "–ì–∞–ª–µ—Ä–µ—è", style: UIAlertActionStyle.default) { action in
            self.openPhotoLibrary()
        }
        let cancelAction = UIAlertAction(title: "–û—Ç–º–µ–Ω–∏—Ç—å", style: UIAlertActionStyle.cancel, handler: nil)
        
        alert.addAction(cameraAction)
        alert.addAction(gallaryAction)
        alert.addAction(cancelAction)
        
        imagePicker.delegate = self
        present(alert, animated: true, completion: nil)
    }
    
    @IBAction func editAction(_ sender: Any) {
        state = (state == .show) ? .edit : .show
    }
    
    @IBAction func gcdAction(_ sender: Any) {
        
        let newUser = User(name: titleField.text ?? "", description: descriptionField.text ?? "", imageName: "")
        GCDDataManager.shared.saveUser(newUser, success: {
            self.showAlert(title: "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", message: nil)
            self.state = .show
        }) { (error) in
            self.showAlert(title: "–û—à–∏–±–∫–∞", message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        }
    }
    
    @IBAction func operationAction(_ sender: Any) {
        
        let newUser = User(name: titleField.text ?? "", description: descriptionField.text ?? "", imageName: "")
        OperationDataManager.shared.saveUser(newUser, success: {
            self.showAlert(title: "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", message: nil)
            self.state = .show
        }) { (error) in
            self.showAlert(title: "–û—à–∏–±–∫–∞", message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        }
    }
    
    // MARK: Library & Camera
    
    func openCamera() {
        
        if (UIImagePickerController .isSourceTypeAvailable(UIImagePickerControllerSourceType.camera)) {
            
            imagePicker.sourceType = UIImagePickerControllerSourceType.camera
            present(imagePicker, animated: true, completion: nil)
        
        } else {
            
            let alertWarning = UIAlertController(title: "–£–ø—Å..", message: "–£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞–º–µ—Ä—ã", preferredStyle: .alert)
            let alertAction = UIAlertAction(title: "–û–ö", style: .default, handler: nil)
            alertWarning.addAction(alertAction)
            present(alertWarning, animated: true, completion: nil)
        }
    }
    
    func openPhotoLibrary() {
        
        imagePicker.sourceType = UIImagePickerControllerSourceType.photoLibrary
        present(imagePicker, animated: true, completion: nil)
    }
    
    // MARK: Image Picker Controller Delegate
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        imagePicker.dismiss(animated: true, completion: nil)
        
        if let image = info[UIImagePickerControllerOriginalImage] as? UIImage {
            userPhotoView.image = image
        }
    }
    
    // MARK: Helpers
    
    func showAlert(title: String, message: String?) {
        
        DispatchQueue.main.async {
            let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)
            
            alertController.addAction(UIAlertAction(title: "OK", style: .default, handler: { (_) in
                alertController.dismiss(animated: true, completion: nil)
            }))
            
            self.present(alertController, animated: true, completion: nil)
        }
    }
    
    func logMethod(_ method: String = #function) {
        print("ProfileViewController: \(method)")
    }
    
}
